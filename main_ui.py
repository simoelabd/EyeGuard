# -*- coding: utf-8 -*-
import face_recognition
# Form implementation generated from reading ui file '.\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QWidget, QApplication, QPushButton, QFrame, QMessageBox, QTableWidgetItem, QMainWindow, \
    QFileDialog
from PyQt5.QtGui import QIntValidator, QPixmap
from PyQt5 import QtCore, QtGui, QtWidgets
import sys

from PyQt5.QtWidgets import QWidget, QApplication, QPushButton, QFrame, QMessageBox, QTableWidgetItem, QMainWindow
from PyQt5.QtGui import QIntValidator
from PyQt5 import QtWidgets, uic, QtCore
import json

from db_conn import ConnectDatabase

class MainWindow2(QWidget):
    def __init__(self):
        super().__init__()

        # Initialize the UI from a separate UI file (created using Qt Designer)
        self.ui = Ui_Form()
        self.ui.setupUi(self)

        # Create a database connection object
        self.db = ConnectDatabase()

        # Connect UI elements to class variables
        self.student_id = self.ui.lineEdit
        self.student_id.setValidator(QIntValidator())  # Restrict input to integers

        self.first_name = self.ui.lineEdit_2
        self.last_name = self.ui.lineEdit_3
        self.email_address = self.ui.lineEdit_4
        self.filiere = self.ui.lineEdit_6
        self.groupe = self.ui.lineEdit_5
        self.image_path = self.ui.image_btn

        self.add_btn = self.ui.add_btn
        self.update_btn = self.ui.update_btn
        self.select_btn = self.ui.select_btn
        self.search_btn = self.ui.search_btn
        self.clear_btn = self.ui.clear_btn
        self.delete_btn = self.ui.delete_btn
        self.image_btn = self.ui.image_btn


        self.result_table = self.ui.tableWidget
        self.result_table.setSortingEnabled(False)
        self.buttons_list = self.ui.function_frame.findChildren(QPushButton)

        # Initialize signal-slot connections
        self.init_signal_slot()

        # Populate the initial data in the table and filiere/groupe dropdowns
        self.search_info()

        self.image_btn.clicked.connect(self.select_image)

    def select_image(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        image_path, _ = QFileDialog.getOpenFileName(self, "Select Image", "", "Image Files (*.png *.jpg *.jpeg *.bmp *.gif)", options=options)
        if image_path:
            pixmap = QPixmap(image_path)
            pixmap = pixmap.scaledToWidth(200)
            self.image_path = image_path

    def init_signal_slot(self):
        # Connect buttons to their respective functions
        self.add_btn.clicked.connect(self.add_info)
        self.search_btn.clicked.connect(self.search_info)
        self.clear_btn.clicked.connect(self.clear_form_info)
        self.select_btn.clicked.connect(self.select_info)
        self.update_btn.clicked.connect(self.update_info)
        self.delete_btn.clicked.connect(self.delete_info)

    def disable_buttons(self):
        # Disable all buttons
        for button in self.buttons_list:
            button.setDisabled(True)

    def enable_buttons(self):
        # Enable all buttons
        for button in self.buttons_list:
            button.setDisabled(False)

    def add_info(self):
        # Function to add student information
        self.disable_buttons()

        student_info = self.get_student_info()

        if student_info["student_id"] and student_info["first_name"]:
            check_result = self.check_student_id(student_id=int(student_info["student_id"]))

            if check_result:
                QMessageBox.information(self, "Warning", "Please input a new student ID",
                                        QMessageBox.StandardButton.Ok)
                self.enable_buttons()
                return

            if not hasattr(self, 'image_path') or not self.image_path:
                QMessageBox.warning(self, "Image Error", "Please select an image first")
                self.enable_buttons()
                return

            image = face_recognition.load_image_file(self.image_path)
            face_encodings = face_recognition.face_encodings(image)

            if len(face_encodings) == 0:
                QMessageBox.warning(self, "Face Detection Error", "No face detected in the image.")
                self.enable_buttons()
                return

            face_encoding = face_encodings[0]  # Assuming there's only one face in the image

            # Convert face encoding to JSON string
            face_encoding_json = json.dumps(face_encoding.tolist())

            add_result = self.db.add_info(student_id=int(student_info["student_id"]),
                                          first_name=student_info["first_name"],
                                          last_name=student_info["last_name"],
                                          email_address=student_info["email_address"],
                                          filiere=student_info["filiere"],
                                          groupe=student_info["groupe"],
                                          image_path=self.image_path,
                                          face_encoding_json=face_encoding_json)

            if add_result:
                QMessageBox.information(self, "Warning", f"Add fail: {add_result}, Please try again.",
                                        QMessageBox.StandardButton.Ok)

        else:
            QMessageBox.information(self, "Warning", "Please input student ID and first name.",
                                    QMessageBox.StandardButton.Ok)

        self.search_info()
        self.enable_buttons()
    def update_info(self):
        # Function to update student information
        new_student_info = self.get_student_info()

        if new_student_info["student_id"]:
            update_result = self.db.update_info(
                student_id=new_student_info["student_id"],
                first_name=new_student_info["first_name"],
                last_name=new_student_info["last_name"],
                email_address=new_student_info["email_address"],
                filiere=new_student_info["filiere"],
                groupe=new_student_info["groupe"]
            )

            if update_result:
                QMessageBox.information(self, "Warning",
                                        f"Fail to update the information: {update_result}. Please try again.",
                                        QMessageBox.StandardButton.Ok)
            else:
                self.search_info()
        else:
            QMessageBox.information(self, "Warning",
                                    f"Please select one student to update.",
                                    QMessageBox.StandardButton.Ok)

    def select_info(self):
        # Function to select and populate student information in the form
        select_row = self.result_table.currentRow()
        if select_row != -1:
            self.student_id.setEnabled(False)
            student_id = self.result_table.item(select_row, 0).text().strip()
            fist_name = self.result_table.item(select_row, 1).text().strip()
            last_name = self.result_table.item(select_row, 2).text().strip()
            filiere = self.result_table.item(select_row, 3).text().strip()
            groupe = self.result_table.item(select_row, 4).text().strip()
            email_address = self.result_table.item(select_row, 5).text().strip()


            self.student_id.setText(student_id)
            self.first_name.setText(fist_name)
            self.last_name.setText(last_name)
            self.filiere.setText(filiere)
            self.groupe.setText(groupe)
            self.email_address.setText(email_address)

        else:
            QMessageBox.information(self, "Warning", "Please select one student information",
                                    QMessageBox.StandardButton.Ok)

    def search_info(self):
        # Function to search for student information and populate the table
        student_info = self.get_student_info()

        search_result = self.db.search_info(
            student_id=student_info["student_id"],
            first_name=student_info["first_name"],
            last_name=student_info["last_name"],
            email_address=student_info["email_address"],
            filiere=student_info["filiere"],
            groupe=student_info["groupe"]
        )

        self.show_data(search_result)

    def clear_form_info(self):
        # Function to clear the form
        self.student_id.clear()
        self.student_id.setEnabled(True)
        self.first_name.clear()
        self.last_name.clear()
        self.email_address.clear()
        self.filiere.clear()
        self.groupe.clear()

    def delete_info(self):
        # Function to delete student information
        select_row = self.result_table.currentRow()
        if select_row != -1:
            selected_option = QMessageBox.warning(self, "Warning", "Are you Sure to delete it?",
                                                  QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.Cancel)

            if selected_option == QMessageBox.StandardButton.Yes:
                student_id = self.result_table.item(select_row, 0).text().strip()

                delete_result = self.db.delete_info(student_id)

                if not delete_result:
                    self.search_info()
                else:
                    QMessageBox.information(self, "Warning",
                                            f"Fail to delete the information: {delete_result}. Please try again.",
                                            QMessageBox.StandardButton.Ok)

        else:
            QMessageBox.information(self, "Warning", "Please select one student information to delete",
                                    QMessageBox.StandardButton.Ok)

    def show_data(self, result):
        # Function to populate the table with student information
        if result:
            self.result_table.setRowCount(0)
            self.result_table.setRowCount(len(result))

            for row, info in enumerate(result):
                info_list = [
                    info["studentId"],
                    info["firstName"],
                    info["lastName"],
                    info["filiere"],
                    info["groupe"],
                    info["emailAddress"],
                    info["date"],
                ]

                for column, item in enumerate(info_list):
                    cell_item = QTableWidgetItem(str(item))
                    self.result_table.setItem(row, column, cell_item)

        else:
            self.result_table.setRowCount(0)
            return


    def get_student_info(self):
        # Function to retrieve student information from the form
        student_id = self.student_id.text().strip()
        first_name = self.first_name.text().strip()
        last_name = self.last_name.text().strip()
        email_address = self.email_address.text().strip()
        filiere = self.filiere.text().strip()
        groupe = self.groupe.text().strip()

        student_info = {
            "student_id": student_id,
            "first_name": first_name,
            "last_name": last_name,
            "email_address": email_address,
            "filiere": filiere,
            "groupe": groupe,
        }

        return student_info

    def check_student_id(self, student_id):
        # Function to check if a student ID already exists
        result = self.db.search_info(student_id=student_id)

        return result



# class MainWindow2(QWidget):
#     def __init__(self):
#         super().__init__()
#
#         # Initialize the UI from a separate UI file (created using Qt Designer)
#         self.ui = Ui_Form()
#         self.ui.setupUi(self)
#         self.show()
class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1013, 777)
        Form.setStyleSheet("#info_frame{\n"
"    background-color: #fff;\n"
"    border:none;\n"
"    border-radius:5px;\n"
"}\n"
"\n"
"#info_frame QLable,\n"
"#info_frame QLineEdit,\n"
"#info_frame QComboBox,\n"
"#function_frame QPushButton,\n"
"QHeaderView::section {\n"
"    font-family: Segoe Ul Semibold;\n"
"    font-size: 12px;\n"
"}\n"
"\n"
"#info_frame QLineEdite,\n"
"#info_frame QComboBox {\n"
"    padding: 4px 5px;\n"
"    border: 1px solid #838383;\n"
"    border-radius: 2px;\n"
"}\n"
"\n"
"#info_frame QLineEdite:focus,\n"
"#info_frame QComboBox:focus {\n"
"    border-color: #0055ff;\n"
"}\n"
"\n"
"QComboBox::drop-down{\n"
"    background: transparent;\n"
"    borde: none;\n"
"    margin-right: 5px;\n"
"}\n"
"\n"
"QComboBox::down-arrow{\n"
"    image: url(:/icons/expand_more.svg);\n"
"}\n"
"\n"
"#result_frame{\n"
"    border-radius: 5px;\n"
"    background-color: #fff;\n"
"}\n"
"\n"
"QTableWidget{\n"
"    border-radius: 3px;\n"
"    border: 1px solid #f0f0f0;\n"
"}\n"
"\n"
"QHeaderView::section {\n"
"    border: none;\n"
"    border-bottom: 1px solid #d0c6ff;\n"
"    text-align: left;\n"
"    padding: 3px 5px;\n"
"}\n"
"\n"
"QTableWidget::Item{\n"
"    border-bottom: 1px solid #d0c6ff;\n"
"    color: #000;\n"
"    padding-left: 3px;\n"
"}\n"
"\n"
"#function_frame QPushButton{\n"
"    font-size: 14px;\n"
"    padding: 5px 10px;\n"
"    border: 2px solid #f0f0f0;\n"
"    border-radius: 5px;\n"
"    background-color: #84e8f7;\n"
"}\n"
"\n"
"#function_frame #delete_btn{\n"
"    background-color:#ff8183;\n"
"}\n"
"\n"
"#function_frame QPushButton:hover{\n"
"    border-color: #4c96f7;\n"
"    font-size: 15px;\n"
"}\n"
"\n"
"#function_frame #delete_btn:hover{\n"
"    border-color: #dc0004;\n"
"}\n"
"\n"
"#gridLayout_2 QPushButton{\n"
"    font-size: 14px;\n"
"    padding: 5px 10px;\n"
"    border: 2px solid #f0f0f0;\n"
"    border-radius: 5px;\n"
"    background-color: #84e8f7;\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"")
        self.gridLayout_5 = QtWidgets.QGridLayout(Form)
        self.gridLayout_5.setContentsMargins(20, 10, 20, 20)
        self.gridLayout_5.setHorizontalSpacing(6)
        self.gridLayout_5.setVerticalSpacing(15)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.titre_label = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Script MT Bold")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.titre_label.setFont(font)
        self.titre_label.setAlignment(QtCore.Qt.AlignCenter)
        self.titre_label.setObjectName("titre_label")
        self.horizontalLayout_2.addWidget(self.titre_label)
        self.gridLayout_5.addWidget(self.frame, 0, 0, 1, 1)
        self.info_frame = QtWidgets.QFrame(Form)
        self.info_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.info_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.info_frame.setObjectName("info_frame")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.info_frame)
        self.gridLayout_3.setContentsMargins(30, 20, 30, 20)
        self.gridLayout_3.setHorizontalSpacing(20)
        self.gridLayout_3.setVerticalSpacing(10)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setHorizontalSpacing(10)
        self.gridLayout.setVerticalSpacing(15)
        self.gridLayout.setObjectName("gridLayout")
        self.label_4 = QtWidgets.QLabel(self.info_frame)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 2, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.info_frame)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.info_frame)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.info_frame)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.info_frame)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout.addWidget(self.lineEdit_2, 1, 1, 1, 1)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.info_frame)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.gridLayout.addWidget(self.lineEdit_3, 2, 1, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout, 0, 0, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setHorizontalSpacing(10)
        self.gridLayout_2.setVerticalSpacing(15)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_7 = QtWidgets.QLabel(self.info_frame)
        self.label_7.setObjectName("label_7")
        self.gridLayout_2.addWidget(self.label_7, 2, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.info_frame)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 1, 0, 1, 1)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.info_frame)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.gridLayout_2.addWidget(self.lineEdit_4, 2, 1, 1, 1)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.info_frame)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.gridLayout_2.addWidget(self.lineEdit_6, 0, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.info_frame)
        self.label_5.setObjectName("label_5")
        self.gridLayout_2.addWidget(self.label_5, 0, 0, 1, 1)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.info_frame)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.gridLayout_2.addWidget(self.lineEdit_5, 1, 1, 1, 1)
        self.image_btn = QtWidgets.QPushButton(self.info_frame)
        self.image_btn.setStyleSheet("QPushButton{\n"
"    font-size: 14px;\n"
"    padding: 5px 10px;\n"
"    border: 2px solid #f0f0f0;\n"
"    border-radius: 5px;\n"
"    background-color: #84e8f7;\n"
"}\n"
"QPushButton:hover{\n"
"    border-color: #4c96f7;\n"
"    font-size: 15px;\n"
"}")
        self.image_btn.setObjectName("image_btn")
        self.gridLayout_2.addWidget(self.image_btn, 3, 1, 1, 1, QtCore.Qt.AlignLeft)
        self.label = QtWidgets.QLabel(self.info_frame)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 3, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout_2, 0, 1, 1, 1)
        self.gridLayout_5.addWidget(self.info_frame, 1, 0, 1, 1)
        self.function_frame = QtWidgets.QFrame(Form)
        self.function_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.function_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.function_frame.setObjectName("function_frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.function_frame)
        self.horizontalLayout.setContentsMargins(30, 10, 30, 10)
        self.horizontalLayout.setSpacing(15)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.add_btn = QtWidgets.QPushButton(self.function_frame)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(".\\icons/add.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.add_btn.setIcon(icon)
        self.add_btn.setObjectName("add_btn")
        self.horizontalLayout.addWidget(self.add_btn)
        self.update_btn = QtWidgets.QPushButton(self.function_frame)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(".\\icons/update.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.update_btn.setIcon(icon1)
        self.update_btn.setObjectName("update_btn")
        self.horizontalLayout.addWidget(self.update_btn)
        self.select_btn = QtWidgets.QPushButton(self.function_frame)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(".\\icons/select.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.select_btn.setIcon(icon2)
        self.select_btn.setObjectName("select_btn")
        self.horizontalLayout.addWidget(self.select_btn)
        self.search_btn = QtWidgets.QPushButton(self.function_frame)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(".\\icons/search.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.search_btn.setIcon(icon3)
        self.search_btn.setObjectName("search_btn")
        self.horizontalLayout.addWidget(self.search_btn)
        self.clear_btn = QtWidgets.QPushButton(self.function_frame)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(".\\icons/clear.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.clear_btn.setIcon(icon4)
        self.clear_btn.setObjectName("clear_btn")
        self.horizontalLayout.addWidget(self.clear_btn)
        self.delete_btn = QtWidgets.QPushButton(self.function_frame)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(".\\icons/delete.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.delete_btn.setIcon(icon5)
        self.delete_btn.setObjectName("delete_btn")
        self.horizontalLayout.addWidget(self.delete_btn)
        self.gridLayout_5.addWidget(self.function_frame, 2, 0, 1, 1)
        self.result_frame = QtWidgets.QFrame(Form)
        self.result_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.result_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.result_frame.setObjectName("result_frame")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.result_frame)
        self.gridLayout_4.setContentsMargins(9, 9, 9, 9)
        self.gridLayout_4.setSpacing(6)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.tableWidget = QtWidgets.QTableWidget(self.result_frame)
        self.tableWidget.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tableWidget.setShowGrid(False)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignVCenter)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(120)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(50)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setVisible(False)
        self.gridLayout_4.addWidget(self.tableWidget, 0, 0, 1, 1)
        self.gridLayout_5.addWidget(self.result_frame, 3, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.titre_label.setText(_translate("Form", "Students Information"))
        self.label_4.setText(_translate("Form", "Last Name"))
        self.label_2.setText(_translate("Form", "Student ID"))
        self.label_3.setText(_translate("Form", "First Name"))
        self.label_7.setText(_translate("Form", "Email Address"))
        self.label_6.setText(_translate("Form", "Groupe"))
        self.label_5.setText(_translate("Form", "Filiere"))
        self.image_btn.setText(_translate("Form", "Image"))
        self.label.setText(_translate("Form", "Image"))
        self.add_btn.setText(_translate("Form", "Add"))
        self.update_btn.setText(_translate("Form", "Update"))
        self.select_btn.setText(_translate("Form", "Select"))
        self.search_btn.setText(_translate("Form", "Search"))
        self.clear_btn.setText(_translate("Form", "Clear"))
        self.delete_btn.setText(_translate("Form", "Delete"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "Student ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Frist Name"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "Last Name"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "Filiere"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "Groupe"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "Email Address"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Form", "Date et Heure d\'entree"))
